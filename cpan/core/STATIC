This document describes how to link an external static library with
Marpa::R2.  This method, and this document, is intended for re-packagers
and other very advanced users.  This method is not supported by the CPAN
infrastructure.  Most users should perfer the basic method described in
the INSTALL document at the top level of the Marpa::R2 CPAN directory.

Here are the steps:

1.) Be sure the library that you are building is a match to the one
that Marpa::R2 expects.  The expected version can be found in the
core/read_only/LIB_VERSION file.  Do *NOT* edit this file.  This version
number must match exactly the version number of your external static
library.

2.) Build an external static library using the separate Libmarpa
repository.  Libmarpa uses autoconf.  Instructions on how to
build it can be found beginning in the INSTALL file at the top
level of the Libmarpa repository.  Libmarpa's repository is here:
https://github.com/jeffreykegler/libmarpa

3.) Install the external static library.  Where and how you install it
is up to you.  The Libmarpa distribution is set up to use autoconf.
Instructions on how to install using autoconf can be found in the
autoconf documentation.  We will assume that you have installed the
external static library in /tmp/libmarpa.a.

4.) Build Marpa::R2 to use the external static library.

   ./Build code --libmarpa-external=/tmp/libmarpa.a

or, to build and test

   ./Build test --libmarpa-external=/tmp/libmarpa.a

5.)  Once, you've switched to an external Libmarpa, a
"--libmarpa-external" option *must* be specified every time you use
"Build" with a target which has Libmarpa as a dependency.  If you forget
to specify a "--libmarpa-external" option, ./Build will abend with
an error message.  To go back to using the internal Libmarpa, use the
"--libmarpa-internal" option.

   ./Build code --libmarpa-internal=on


TAGS
====

To be sure you are actually testing the library you hope you
are testing, Libmarpa now has a "tag", which can be set at compile
time and which can identify every compilation uniquely.  By default,
if you compile with GCC, the tag is a time stamp, recording when the
preprocessor was run.  You can also set the tag explicitly:

    ./configure MARPA_DEBUG_FLAG=-DMARPA_TAG=testing123

The tag appears early in the test output:

    t/00-load.t ............ 1/4 # Marpa::R2 version is 2.085_004
    # Libmarpa version is 6.0.3
    # Libmarpa tag: testing123

You can put spaces and other non-word characters into the tag, but you have to
figure out how to make them run the guantlet from shell to Makefile to compiler
command line.  Here's an example who works on Linux:

    ./configure MARPA_DEBUG_FLAG="\"-DMARPA_TAG=*This is a test*\""
