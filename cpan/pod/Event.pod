# Copyright 2014 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.

=head1 NAME

Marpa::R2::Event - SLIF parse events

=head1 Synopsis

=for Marpa::R2::Display
name: SLIF events() method synopsis
normalize-whitespace: 1

    my $length = length $string;
    my $pos    = $slr->read( \$string );
    READ: while (1) {

        my @actual_events = ();

        EVENT:
        for my $event ( @{ $slr->events() } ) {
            my ($name) = @{$event};
            push @actual_events, $name;
        }

        if (@actual_events) {
            $actual_events .= join q{ }, $pos, @actual_events;
            $actual_events .= "\n";
        }
        last READ if $pos >= $length;
        $pos = $slr->resume($pos);
    } ## end READ: while (1)

=for Marpa::R2::Display::End

=head1 About this document

This document describes SLIF parse events.
These allow the SLIF internal scanning to be interrupted when events
specified by the application occur.
This allows applications to take over from Marpa,
and do their own processing,
including their own "external" scanning.
The application may ask Marpa to resume internal scanning at
any point.

SLIF parse events may be named or unnamed.
Use of unnamed events is discouraged, and should be reserved for legacy
code.
New applications should only use named events.
For more about unnamed events, see
L<below|/"Unnamed events">.

Historically SLIF parse events have also been 
called "pauses" or simply "events".
Some of the method names still contain the word "pause", for backward
compatibility,
and SLIF parse events are sometimes still simply called "events",
in contexts where the meaning is clear.

=head1 The life cycle of events

Events are first B<declared>.
A declared event may B<trigger>.
Once an event triggers, it may be B<read>.

Events are declared in the SLIF DSL.
Parse events are divided into lexeme events
and non-lexeme events.
Lexeme events are declared using
L<a C<:lexeme> pseudo-rules|Marpa::R2::DSL/"Lexeme pseudo-rules">.
Non-lexeme events are declared using
L<named event statements|Marpa::R2::DSL/"Named event statement">.
Below, the various parse events will be described in detail,
and the descriptions
will indicate specifically whether the event described is a lexeme
or a non-lexeme event.

Once declared, events
may trigger during any event-active SLIF
recognizer method.
When an event triggers, it causes the event-active
method to return immediate, with the current location
at the B<trigger point>.
The event-active SLIF recognizer methods are
L<C<read()>|Marpa::R2::Scanless::R/"read()">,
L<C<resume()>|Marpa::R2::Scanless::R/"resume()">,
L<C<lexeme_read()>|Marpa::R2::Scanless::R/"lexeme_read()"> and
L<C<lexeme_complete()>|Marpa::R2::Scanless::R/"lexeme_complete()">.

Applications should be careful of a special case --
event-active method which returns for other reasons
may also have triggered events.
For example,
an application cannot assume,
just because 
the L<C<read()>|Marpa::R2::Scanless::R/"read()"> method 
has reached end of string and returned normally, 
that there is no parse event to be read.
A parse event might have triggered at the end of string,
in which case the trigger point will also be
the end of string.

=head1 Types of parse event

=head2 Completion events

Completion events are non-lexeme events,
and are declared in
L<named event statements|Marpa::R2::DSL/"Named event statement">.
Completion SLIF parse events can be specifed for any
symbol that is not a lexeme.
The completion event triggers
occur whenever a rule with that symbol on
its LHS is fully recognized in the parse.
(The idea is that "symbol completion" occurs when the
rule, and therefore its LHS, is "complete".)
For this purpose,
a nulled symbol is not considered "complete",
and nulled symbols never trigger completion events.
A completion event is never triggered by any
zero-length instance of a symbol.

=head2 Nulling events

Nulling events are non-lexeme events,
and are declared in
L<named event statements|Marpa::R2::DSL/"Named event statement">.
Nulling SLIF parse events may be defined for any symbol
which is not a lexeme.
A nulling SLIF parse event occurs whenever a zero-length symbol instance
is recognized.
Null symbols may derive other null symbols,
and these derivations may be ambiguous.
Ambiguous or not,
all such derivations cause nulling SLIF parse events.

Again,
for this purpose,
a nulled symbol is never considered "complete".
This means that
nulling events and completion events are mutually exclusive --
a nulled, or zero-length, symbol will only trigger a nulling event
and never a completion event.
And any symbol recognized at greater than zero-length will never trigger
a nulling event.

=head2 Prediction events

Prediction SLIF parse events may be defined for any symbol,
whether it is a lexeme or not.
Prediction events are non-lexeme events, even if their symbol
is a lexeme.
A prediction event occurs at any location where a non-zero length
symbol would be accepted by the recognizer.
It can be thought of as occurring when a symbol is "expected".
The expectation may or may not come true, depending on future
input.

There is no actual distinction between expecting
a zero-length symbol,
and actually seeing one.
Zero-length symbols are always regarded as actually being
recognized as soon as they are predicted, and
they never generate prediction events,
only nulling events.

=head2 After-lexeme events

An after-lexeme event is a lexeme event.

=head2 Before-lexeme events

An before-lexeme event is a lexeme event.
A before-lexeme event is B<not>
the same as
a prediction event of a symbol which is a lexeme,
although the two may occur at once.
A before-lexeme event does not occur unless that the lexeme is actually
found in the input.
A prediction event, on the other hand, is
as the name suggests, only a prediction.
The predicted symbol may or not actually be found in the input.

=head1 Unnamed events

Use of unnamed events is strongly discouraged.
However, to support legacy code, unnamed events are still supported
and are still described in this documentation.

Unnamed events are defined in
L<C<:lexeme> pseudo-rules|Marpa::R2::Scanless::DSL/"Lexeme pseudo-rules">,
when
L<the C<pause> adverb|Marpa::R2::Scanless::DSL/"pause"> 
is used without an
L<the C<event> adverb|Marpa::R2::Scanless::DSL/"event">.
(The C<pause> adverb is so named, because
Marpa's SLIF parse events were once called ``pauses''.)
Since the
L<the C<pause> adverb|Marpa::R2::Scanless::DSL/"pause">
does create a SLIF parse event, but
it is the
L<the C<event> adverb|Marpa::R2::Scanless::DSL/"event">
that provide the name for the SLIF parse event,
this results in an event without a name --
an unnamed event.

=head1 Copyright and License

=for Marpa::R2::Display
ignore: 1

  Copyright 2014 Jeffrey Kegler
  This file is part of Marpa::R2.  Marpa::R2 is free software: you can
  redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation,
  either version 3 of the License, or (at your option) any later version.

  Marpa::R2 is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser
  General Public License along with Marpa::R2.  If not, see
  http://www.gnu.org/licenses/.

=for Marpa::R2::Display::End

=cut

# vim: expandtab shiftwidth=4:
